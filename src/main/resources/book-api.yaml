openapi: 3.0.2
info:
  version: 1.0.0
  title: IT SYNC API Service
  description: 'IT SYNC Service API Specification.'

tags:
  - name: IT SYNC Web
    description: "API for IT SYNC"

servers:
  - url: /api/v1

paths:

  /books/getAllBooks:
    get:
      tags:
        - books
      summary: "Retrieve all books"
      operationId: getAllBooks
      x-operationId-exception: true
      parameters:
        - in: query
          explode: false
          name: bookId
          required: false
          schema:
            type: string
      x-spring-paginated: true
      responses:
        200:
          description: "List of All books"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"

  /books/addBook:
    post:
      tags:
        - books
      summary: "Add new Book"
      operationId: addBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        201:
          description: "Book added"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          $ref: '#/components/responses/500ApiError'

  /books/updateBook:
    put:
      tags:
        - books
      summary: "Update exiting Book"
      operationId: updateBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        201:
          description: "Book updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          $ref: '#/components/responses/500ApiError'

  /books/deleteBookById/{bookId}:
    delete:
      tags:
        - books
      summary: "Delete book by book Id"
      operationId: deleteBookById
      x-operationId-exception: true
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: long
      responses:
        201:
          description: "Deletes the book by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        500:
          $ref: '#/components/responses/500ApiError'

  /books/fetchByAuthor/{author}:
    get:
      tags:
        - books
      summary: "Find book by author"
      operationId: fetchByAuthor
      x-operationId-exception: true
      parameters:
        - name: author
          in: path
          description: Book to be return by author
          required: true
          schema:
            type: string
      responses:
        201:
          description: "Fetch book by author"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        500:
          $ref: '#/components/responses/500ApiError'

  /books/fetchVolumesGreaterThanFour:
    get:
      tags:
        - books
      summary: "fetch book by volumes greater than 4"
      operationId: fetchVolumesGreaterThanFour
      x-operationId-exception: true
      parameters:
        - in: query
          explode: false
          name: volumes
          required: false
          schema:
            type: integer
      x-spring-paginated: true
      responses:
        200:
          description: "List of All books having volumes greater than 4"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"


components:
  parameters:
    AuditUserIdHeader:
      name: X-loggedInUserId
      description: loggedInUserId for audit
      in: header
      required: true
      schema:
        type: integer

    PageNumber:
      in: query
      name: page
      description: "Page Number to return"
      required: true
      schema:
        type: integer
        default: 0
        example: 1

    PageSize:
      in: query
      name: size
      description: "Number of results in a page"
      required: true
      schema:
        type: integer
        default: 20
        example: 10
        maximum: 50

  responses:
    500ApiError:
      description: "There is Unexpected 500 error."
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: string
                example: 500
              message:
                type: string
                example: "This is a 500 error"

  schemas:
    Response:
      type: object
      properties:
        data:
          type: object
        totalItems:
          type: integer
          format: int64
        _links:
          $ref: '#/components/schemas/_links'

    _link:
      type: object
      properties:
        href:
          type: string

    _links:
      type: array
      items:
        $ref: '#/components/schemas/_link'

    Book:
      type: object
      required:
        - title
        - author
        - price
        - format
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          description: Title of the book
          pattern: "^[a-zA-Z0-9_ +.-]*$"
        author:
          type: string
          description: Author of the book
        genre:
          type: string
          description: Genre of the book
        format:
          type: string
          description: Format of the book
        price:
          type: number
          description: Price of the book
          format: double
        volumes:
          type: integer